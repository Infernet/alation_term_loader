{"version":3,"sources":["../../../src/helpers/validator.ts"],"names":["validateTerm","term","parentTermName","length","MissingRequireFieldTermError","TERM_COLUMN_NAMES","termName","action","toUpperCase","UnknownActionTermError","description","reference","split","UncorrectedReferenceTermError","validatePhysic","physic","MissingRequireFieldPhysicError","PHYSIC_COLUMN_NAMES","physicPath","UncorrectedPathFormatPhysicError","validateCustomFieldId","customFields","keys","Error","k"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;;AAGO,SAASA,YAAT,CAAsBC,IAAtB,EAAyC;AAC9C,MAAI,CAACA,IAAI,CAACC,cAAL,CAAoBC,MAAzB,EAAiC;AAC/B,UAAM,IAAIC,mCAAJ,CAAiCC,6BAAkBH,cAAnD,CAAN;AACD;;AACD,MAAI,CAACD,IAAI,CAACK,QAAL,CAAcH,MAAnB,EAA2B;AACzB,UAAM,IAAIC,mCAAJ,CAAiCC,6BAAkBC,QAAnD,CAAN;AACD;;AACD,MAAI,EAAEL,IAAI,CAACM,MAAL,KAAgB,EAAhB,IACFN,IAAI,CAACM,MAAL,CAAYC,WAAZ,OAA8B,GAD5B,IAEFP,IAAI,CAACM,MAAL,CAAYC,WAAZ,OAA8B,GAF5B,IAGFP,IAAI,CAACM,MAAL,CAAYC,WAAZ,OAA8B,GAH9B,CAAJ,EAGwC;AACtC,UAAM,IAAIC,6BAAJ,EAAN;AACD;;AACD,MAAI,CAACR,IAAI,CAACS,WAAL,CAAiBP,MAAtB,EAA8B;AAC5B,UAAM,IAAIC,mCAAJ,CAAiCC,6BAAkBK,WAAnD,CAAN;AACD;;AACD,MAAIT,IAAI,CAACU,SAAL,CAAeC,KAAf,CAAqB,GAArB,EAA0BT,MAA1B,KAAqC,CAAzC,EAA4C;AAC1C,UAAM,IAAIU,oCAAJ,CAAkCZ,IAAI,CAACK,QAAvC,EAAiDL,IAAI,CAACC,cAAtD,CAAN;AACD;AACF;;AAEM,SAASY,cAAT,CAAwBC,MAAxB,EAA+C;AACpD,MAAI,CAACA,MAAM,CAACb,cAAP,CAAsBC,MAA3B,EAAmC;AACjC,UAAM,IAAIa,uCAAJ,CAAmCC,+BAAoBf,cAAvD,CAAN;AACD;;AACD,MAAI,CAACa,MAAM,CAACT,QAAP,CAAgBH,MAArB,EAA6B;AAC3B,UAAM,IAAIa,uCAAJ,CAAmCC,+BAAoBX,QAAvD,CAAN;AACD;;AACD,MAAI,CAACS,MAAM,CAACG,UAAP,CAAkBf,MAAvB,EAA+B;AAC7B,UAAM,IAAIa,uCAAJ,CAAmCC,+BAAoBC,UAAvD,CAAN;AACD;;AACD,MAAIH,MAAM,CAACG,UAAP,CAAkBN,KAAlB,CAAwB,GAAxB,EAA6BT,MAA7B,GAAsC,CAAtC,IAA2CY,MAAM,CAACG,UAAP,CAAkBN,KAAlB,CAAwB,GAAxB,EAA6BT,MAA7B,GAAsC,CAArF,EAAwF;AACtF,UAAM,IAAIgB,yCAAJ,EAAN;AACD;AACF;;AAEM,SAASC,qBAAT,CAA+BC,YAA/B,EAAqF;AAC1F,QAAMC,IAAuC,GAAG,CAC9C,cAD8C,EAE9C,YAF8C,EAG9C,iBAH8C,EAI9C,WAJ8C,EAK9C,UAL8C,CAAhD;;AAOA,MAAI,CAACD,YAAL,EAAmB;AACjB,UAAM,IAAIE,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAGD,OAAK,MAAMC,CAAX,IAAgBF,IAAhB,EAAsB;AACpB,QAAI,OAAOD,YAAY,CAACG,CAAD,CAAnB,KAA2B,QAA/B,EAAyC;AACvC,YAAM,IAAID,KAAJ,CAAW,oEAAmEC,CAAE,EAAhF,CAAN;AACD;AACF;AACF","sourcesContent":["import {CustomFieldsIdCollection, IPhysic, ITerm} from '../types';\nimport {MissingRequireFieldTermError, UncorrectedReferenceTermError, UnknownActionTermError} from '../errors/terms';\nimport {PHYSIC_COLUMN_NAMES, TERM_COLUMN_NAMES} from '../constants';\nimport {$Keys} from 'utility-types';\nimport {MissingRequireFieldPhysicError, UncorrectedPathFormatPhysicError} from '../errors/physics';\n\n\nexport function validateTerm(term: ITerm): void {\n  if (!term.parentTermName.length) {\n    throw new MissingRequireFieldTermError(TERM_COLUMN_NAMES.parentTermName);\n  }\n  if (!term.termName.length) {\n    throw new MissingRequireFieldTermError(TERM_COLUMN_NAMES.termName);\n  }\n  if (!(term.action === '' ||\n      term.action.toUpperCase() === 'I' ||\n      term.action.toUpperCase() === 'U' ||\n      term.action.toUpperCase() === 'D')) {\n    throw new UnknownActionTermError();\n  }\n  if (!term.description.length) {\n    throw new MissingRequireFieldTermError(TERM_COLUMN_NAMES.description);\n  }\n  if (term.reference.split('.').length !== 3) {\n    throw new UncorrectedReferenceTermError(term.termName, term.parentTermName);\n  }\n}\n\nexport function validatePhysic(physic: IPhysic): void {\n  if (!physic.parentTermName.length) {\n    throw new MissingRequireFieldPhysicError(PHYSIC_COLUMN_NAMES.parentTermName);\n  }\n  if (!physic.termName.length) {\n    throw new MissingRequireFieldPhysicError(PHYSIC_COLUMN_NAMES.termName);\n  }\n  if (!physic.physicPath.length) {\n    throw new MissingRequireFieldPhysicError(PHYSIC_COLUMN_NAMES.physicPath);\n  }\n  if (physic.physicPath.split('.').length < 3 || physic.physicPath.split('.').length > 4) {\n    throw new UncorrectedPathFormatPhysicError();\n  }\n}\n\nexport function validateCustomFieldId(customFields: undefined | { [x: string]: any }): void {\n  const keys: $Keys<CustomFieldsIdCollection>[] = [\n    'lineageTable',\n    'lineageRef',\n    'alternativeName',\n    'reference',\n    'stewards',\n  ];\n  if (!customFields) {\n    throw new Error('В конфигурационном файле отсутствуют идентификаторы custom fields');\n  }\n\n\n  for (const k of keys) {\n    if (typeof customFields[k] !== 'number') {\n      throw new Error(`В конфигурационном файле отсутствуют идентификатор custom fields ${k}`);\n    }\n  }\n}\n"],"file":"validator.js"}