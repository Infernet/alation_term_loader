{"version":3,"sources":["../../src/index.ts"],"names":["run","console","log","chalk","bgBlack","white","inputConfigPath","inputFilePath","inputMode","inputSkipHeader","inquirer","prompt","type","name","message","bgGray","green","default","path","join","process","cwd","choices","filter","input","configPath","isAbsolute","filePath","config","env","connector","Alation","username","password","host","tokenName","tokenStoragePath","e","error"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport {loadConfig} from './helpers/config';\nimport {Alation} from 'alation_connector';\nimport {runTermService} from './services/term';\nimport {runPhysicService} from './services/physics';\nimport {ModeType, TerminalAnswer} from './types';\nimport inquirer from 'inquirer';\n\nexport async function run(): Promise<void> {\n  try {\n    console.log(chalk.bgBlack(chalk.white('Загрузчик терминов и физики в Alation')));\n    const {\n      inputConfigPath,\n      inputFilePath,\n      inputMode,\n      inputSkipHeader,\n    } = await inquirer.prompt<TerminalAnswer>([\n      {\n        type: 'input',\n        name: 'inputConfigPath',\n        message: chalk.bgGray(chalk.green('Укажите путь к конфигурационному файлу')),\n        default: path.join(process.cwd(), 'config.json'),\n      },\n      {\n        type: 'list',\n        name: 'inputMode',\n        message: chalk.bgGray(chalk.green('Выберите режим работы')),\n        choices: [\n          'Загрузка терминов',\n          'Загрузка физики',\n        ],\n        default: 'Загрузка физики',\n        filter(input: string): ModeType {\n          if (input === 'Загрузка терминов') {\n            return 'terms';\n          }\n          return 'physics';\n        },\n      },\n      {\n        type: 'input',\n        name: 'inputFilePath',\n        message: chalk.bgGray(chalk.green('Укажите путь к TSV файлу')),\n        default: path.join(process.cwd(), 'uploads/physics.tsv'),\n      },\n      {\n        type: 'list',\n        name: 'inputSkipHeader',\n        message: chalk.bgGray(chalk.green('Первая запись в файле заголовок?')),\n        choices: [\n          'Да',\n          'Нет',\n        ],\n        default: 'Да',\n        filter(input: string): boolean {\n          return input === 'Да';\n        },\n      },\n    ]);\n\n    const configPath: string = path.isAbsolute(inputConfigPath) ? inputConfigPath : path.join(process.cwd(), inputConfigPath);\n    const filePath: string = path.isAbsolute(inputFilePath) ? inputFilePath : path.join(process.cwd(), inputFilePath);\n    const config = loadConfig(configPath);\n\n\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    const connector = new Alation({\n      username: config.username,\n      password: config.password,\n    }, config.host, {tokenName: config.tokenName, tokenStoragePath: config.tokenStoragePath});\n\n\n    if (inputMode === 'terms') {\n      await runTermService(connector, config, filePath, inputSkipHeader);\n    } else {\n      await runPhysicService(connector, config, filePath, inputSkipHeader);\n    }\n  } catch (e) {\n    console.error(e.message);\n  }\n  console.log('Завершение работы');\n}\n"],"file":"index.js"}