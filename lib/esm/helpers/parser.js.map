{"version":3,"sources":["../../../src/helpers/parser.ts"],"names":["PHYSICS_FIELDS_POSITION","TERM_FIELDS_POSITION","parseTerm","content","columns","split","map","e","trim","result","fieldName","position","Object","entries","length","parsePhysics"],"mappings":"AACA,SAAQA,uBAAR,EAAiCC,oBAAjC;AAGA,OAAO,SAASC,SAAT,CAAmBC,OAAnB,EAA2C;AAChD,QAAMC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBC,GAApB,CAAyBC,CAAD,IAAKA,CAAC,CAACC,IAAF,EAA7B,CAAhB;AACA,QAAMC,MAAa,GAAG,EAAtB;;AAEA,OAAK,MAAM,CAACC,SAAD,EAAYC,QAAZ,CAAX,IAAoCC,MAAM,CAACC,OAAP,CAAeZ,oBAAf,CAApC,EAA0E;AAAA;;AACxE,QAAIS,SAAS,KAAK,UAAlB,EAA8B;AAAA;;AAC5BD,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoB,qBAAAN,OAAO,CAACO,QAAD,CAAP,gEAAmBG,MAAnB,GAA4BV,OAAO,CAACO,QAAD,CAAP,CAAkBN,KAAlB,CAAwB,GAAxB,CAA5B,GAA2D,EAA/E;AACA;AACD,KAJuE,CAKxE;;;AACAI,IAAAA,MAAM,CAACC,SAAD,CAAN,GAAoB,uBAAAN,OAAO,CAACO,QAAD,CAAP,0EAAmBH,IAAnB,OAA6B,EAAjD;AACD;;AAED,SAAOC,MAAP;AACD;AAED,OAAO,SAASM,YAAT,CAAsBZ,OAAtB,EAAgD;AACrD,QAAMC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBC,GAApB,CAAyBC,CAAD,IAAKA,CAAC,CAACC,IAAF,EAA7B,CAAhB;AACA,QAAMC,MAAe,GAAG,EAAxB;;AAEA,OAAK,MAAM,CAACC,SAAD,EAAYC,QAAZ,CAAX,IAAoCC,MAAM,CAACC,OAAP,CAAeb,uBAAf,CAApC,EAA6E;AAAA;;AAC3E;AACAS,IAAAA,MAAM,CAACC,SAAD,CAAN,GAAoB,uBAAAN,OAAO,CAACO,QAAD,CAAP,0EAAmBH,IAAnB,OAA6B,EAAjD;AACD;;AAED,SAAOC,MAAP;AACD","sourcesContent":["import {IPhysic, ITerm} from '../types';\nimport {PHYSICS_FIELDS_POSITION, TERM_FIELDS_POSITION} from '../constants';\n\n\nexport function parseTerm(content: string): ITerm {\n  const columns = content.split('\\t').map((e)=>e.trim());\n  const result: ITerm = {} as ITerm;\n\n  for (const [fieldName, position] of Object.entries(TERM_FIELDS_POSITION)) {\n    if (fieldName === 'stewards') {\n      result[fieldName] = columns[position]?.length ? columns[position].split(',') : [];\n      continue;\n    }\n    // @ts-ignore\n    result[fieldName] = columns[position]?.trim() ?? '';\n  }\n\n  return result;\n}\n\nexport function parsePhysics(content: string): IPhysic {\n  const columns = content.split('\\t').map((e)=>e.trim());\n  const result: IPhysic = {} as IPhysic;\n\n  for (const [fieldName, position] of Object.entries(PHYSICS_FIELDS_POSITION)) {\n    // @ts-ignore\n    result[fieldName] = columns[position]?.trim() ?? '';\n  }\n\n  return result;\n}\n"],"file":"parser.js"}