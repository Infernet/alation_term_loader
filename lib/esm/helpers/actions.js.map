{"version":3,"sources":["../../../src/helpers/actions.ts"],"names":["checkParentChildrenTermExists","checkSearchResult","getParentTerm","getTermByPath","setAlternativeNameField","setLineageTableField","setReferenceField","updateStewardsField","AlationTermError","UniqTermKeyTermError","PHYSIC_COLUMN_NAMES","TERM_COLUMN_NAMES","ParentTermDuplicatePhysicError","ParentTermNotFoundPhysicError","TermNotFoundPhysicError","generateLineageTableRow","insertOrReplaceTableRow","htmlParser","insertTerm","connector","customFieldsId","termData","parentTerm","parentTermName","term","Article","create","title","termName","body","description","custom_templates","map","t","id","addChild","otype","join","lineageTable","alternativeName","reference","length","stewards","response","updateTerm","update","deleteTerm","result","delete","uploadPhysic","physicData","searchResult","search","termId","children","find","child","getById","segments","physicPath","split","tableCustomField","custom_fields","field","field_name","value_type","value","instance","Datasource","schema","Schema","name","toLowerCase","ds_id","table","Table","schema_id","lineageTableRow","attribute","Attribute","table_id","key","error","updateCustomFieldsValue","field_id","lineageRef","oid","display_name","url"],"mappings":"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","sourcesContent":["import {Alation, IAttribute, ITable} from 'alation_connector';\nimport {CustomFieldsIdCollection, IPhysic, ITerm} from '../types';\nimport {ITermArticle, LinkCustomFieldValue} from '../types/alation';\nimport {\n  checkParentChildrenTermExists,\n  checkSearchResult,\n  getParentTerm,\n  getTermByPath,\n  setAlternativeNameField,\n  setLineageTableField,\n  setReferenceField,\n  updateStewardsField,\n} from './index';\nimport {AlationTermError, UniqTermKeyTermError} from '../errors/terms';\nimport {PHYSIC_COLUMN_NAMES, TERM_COLUMN_NAMES} from '../constants';\nimport {\n  ParentTermDuplicatePhysicError,\n  ParentTermNotFoundPhysicError,\n  TermNotFoundPhysicError,\n} from '../errors/physics';\nimport {generateLineageTableRow, insertOrReplaceTableRow} from './html';\nimport htmlParser from 'node-html-parser';\n\nexport async function insertTerm(connector: Alation, customFieldsId: CustomFieldsIdCollection, termData: ITerm): Promise<void> {\n  const parentTerm = await getParentTerm(connector, termData.parentTermName);\n  // проверка на уникальность ключа PARENT_TERM.CHILD_TERM\n  if (checkParentChildrenTermExists(parentTerm, termData)) {\n    throw new UniqTermKeyTermError();\n  }\n  // создание термина\n  const term = await connector.Article.create<ITermArticle>({\n    title: termData.termName,\n    body: termData.description,\n    custom_templates: parentTerm.custom_templates.map((t) => t.id),\n  });\n  // связывание с родителем\n  if (!(await connector.Article.addChild(parentTerm.id, {id: term.id, otype: 'article'}))) {\n    throw new AlationTermError([TERM_COLUMN_NAMES.parentTermName, TERM_COLUMN_NAMES.termName].join(','),\n        'не удалось связать родительский термин с потомком');\n  }\n\n  // запись Lineage table\n  if (!(await setLineageTableField(connector, customFieldsId.lineageTable, term))) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.termName, 'не удалось произвести запись таблицы поля Lineage');\n  }\n\n  // запись Alternative name\n  if (!(await setAlternativeNameField(connector, customFieldsId.alternativeName, term, termData.alternativeName))) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.alternativeName, 'не удалось произвести запись поля Alternative name');\n  }\n\n  // запись ссылки reference\n  if (termData.reference.length && !(await setReferenceField(connector, customFieldsId.reference, term, termData.reference))) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.reference, 'не удалось произвести запись поля Reference');\n  }\n  // добавление stewards\n  if (termData.stewards.length) {\n    const response = await updateStewardsField(connector, customFieldsId.stewards, term, termData.stewards);\n    if (response) {\n      throw new AlationTermError('Steward', response);\n    }\n  }\n}\n\nexport async function updateTerm(connector: Alation, customFieldsId: CustomFieldsIdCollection, termData: ITerm): Promise<void> {\n  // получение термина по ключу\n  let term = await getTermByPath(connector, termData.parentTermName, termData.termName);\n  // обновление полей\n\n  // body\n  term = await connector.Article.update<ITermArticle>({id: term.id, title: term.title, body: termData.description});\n  // Alternative name\n  if (!(await setAlternativeNameField(connector, customFieldsId.alternativeName, term, termData.alternativeName))) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.alternativeName, 'не удалось обновить поле Alternative name');\n  }\n\n  // запись ссылки reference\n  if (termData.reference.length && !(await setReferenceField(connector, customFieldsId.reference, term, termData.reference))) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.reference, 'не удалось обновить поле Reference');\n  }\n\n  // добавление stewards\n  if (termData.stewards.length) {\n    const response = await updateStewardsField(connector, customFieldsId.stewards, term, termData.stewards);\n    if (response) {\n      throw new AlationTermError('Steward', response);\n    }\n  }\n}\n\nexport async function deleteTerm(connector: Alation, termData: ITerm): Promise<void> {\n  // получение термина по ключу\n  const term = await getTermByPath(connector, termData.parentTermName, termData.termName);\n  // удаление\n  const result = await connector.Article.delete(term.id);\n  if (!result) {\n    throw new AlationTermError([TERM_COLUMN_NAMES.parentTermName, TERM_COLUMN_NAMES.termName].join(','), `не удалось удалить термин`);\n  }\n}\n\nexport async function uploadPhysic(connector: Alation, customFieldsId: CustomFieldsIdCollection, physicData: IPhysic): Promise<void> {\n  // получение термина по ключу\n  const searchResult = await connector.Article.search<ITermArticle>({title: physicData.parentTermName}, true);\n  if (!searchResult.length) {\n    throw new ParentTermNotFoundPhysicError();\n  }\n  if (searchResult.length > 1) {\n    throw new ParentTermDuplicatePhysicError();\n  }\n  const termId = searchResult[0].children.find((child) => child.title === physicData.termName && child.otype === 'article');\n  if (!termId) {\n    throw new TermNotFoundPhysicError();\n  }\n  // получение термина\n  const term = await connector.Article.getById<ITermArticle>(termId.id) as ITermArticle;\n  const segments = physicData.physicPath.split('.');\n\n  // поиск custom_field Lineage таблицы термина\n  const tableCustomField = term.custom_fields.find((field) => (field.field_name === 'Lineage' && field.value_type === 'rich_text'));\n  let lineageTable = htmlParser(tableCustomField ? tableCustomField.value : '');\n\n\n  // получение источника\n  const instance = checkSearchResult(await connector.Datasource.search({title: segments[0]}, true));\n  // получение схемы\n  const schema = checkSearchResult(await connector.Schema.search({\n    name: segments[1].toLowerCase(),\n    ds_id: instance.id,\n  }, true));\n  // получение таблицы\n  let table = checkSearchResult(await connector.Table.search({\n    name: segments[2].toLowerCase(),\n    ds_id: instance.id,\n    schema_id: schema.id,\n  }, true));\n\n  let lineageTableRow;\n  if (segments.length === 4) {\n    // получение аттрибута\n    let attribute = checkSearchResult(await connector.Attribute.search({\n      name: segments[3].toLowerCase(),\n      ds_id: instance.id,\n      schema_id: schema.id, table_id: table.id,\n    }, true));\n\n    // обновление title и description\n    if (physicData.title.length || physicData.description.length) {\n      const response = await connector.Attribute.update({\n        key: [\n          instance.id,\n          schema.name.toLowerCase(),\n          table.name.toLowerCase(),\n          attribute.name.toLowerCase(),\n        ].join('.'),\n        ...(physicData.title.length ? {title: physicData.title} : {}),\n        ...(physicData.description.length ? {description: physicData.description} : {}),\n      });\n\n      if (response.error) {\n        throw new AlationTermError(PHYSIC_COLUMN_NAMES.physicPath, 'не удалось обновить title и description');\n      }\n      attribute = await connector.Attribute.getById(attribute.id) as IAttribute;\n    }\n\n    lineageTableRow = generateLineageTableRow('attribute', instance, schema, table, attribute);\n    // добавление ссылки Lineage ref\n    const response = await connector.updateCustomFieldsValue<LinkCustomFieldValue>({\n      field_id: customFieldsId.lineageRef,\n      otype: 'article',\n      oid: term.id,\n      value: {\n        display_name: '',\n        oid: attribute.id,\n        otype: 'attribute',\n        url: attribute.url,\n        id: attribute.id,\n      },\n    });\n    if (!response) {\n      throw new AlationTermError([\n        PHYSIC_COLUMN_NAMES.parentTermName,\n        PHYSIC_COLUMN_NAMES.termName,\n        PHYSIC_COLUMN_NAMES.physicPath,\n      ].join(','), 'не удалось добавить ссылку в custom field Lineage');\n    }\n  } else {\n    // обновление title и description\n    if (physicData.title.length || physicData.description.length) {\n      const response = await connector.Table.update({\n        key: [\n          instance.id,\n          schema.name.toLowerCase(),\n          table.name.toLowerCase(),\n        ].join('.'),\n        ...(physicData.title.length ? {title: physicData.title} : {}),\n        ...(physicData.description.length ? {description: physicData.description} : {}),\n      });\n\n      if (response.error) {\n        throw new AlationTermError(PHYSIC_COLUMN_NAMES.physicPath, 'не удалось обновить title и description');\n      }\n      table = await connector.Table.getById(table.id) as ITable;\n    }\n\n    lineageTableRow = generateLineageTableRow('table', instance, schema, table);\n    // добавление ссылки Lineage ref\n    const response = await connector.updateCustomFieldsValue<LinkCustomFieldValue>({\n      field_id: customFieldsId.lineageRef,\n      otype: 'article',\n      oid: term.id,\n      value: {\n        display_name: '',\n        oid: table.id,\n        otype: 'table',\n        url: table.url,\n        id: table.id,\n      },\n    });\n    if (!response) {\n      throw new AlationTermError([\n        PHYSIC_COLUMN_NAMES.parentTermName,\n        PHYSIC_COLUMN_NAMES.termName,\n        PHYSIC_COLUMN_NAMES.physicPath,\n      ].join(','), 'не удалось добавить ссылку в custom field Lineage');\n    }\n  }\n  // добавление/переопределение записи в таблице\n  lineageTable = insertOrReplaceTableRow(lineageTable, lineageTableRow);\n\n  // обновление таблицы термина\n  if (!(await setLineageTableField(connector, customFieldsId.lineageTable, term, lineageTable))) {\n    throw new AlationTermError([\n      PHYSIC_COLUMN_NAMES.parentTermName,\n      PHYSIC_COLUMN_NAMES.termName,\n      PHYSIC_COLUMN_NAMES.physicPath,\n    ].join(','), 'не удалось добавить запись в таблицу Lineage');\n  }\n}\n"],"file":"actions.js"}