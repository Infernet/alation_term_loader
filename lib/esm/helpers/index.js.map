{"version":3,"sources":["../../../src/helpers/index.ts"],"names":["TERM_COLUMN_NAMES","AlationTermError","ParentTermDuplicateTermError","ParentTermNotFoundTermError","TermNotFoundTermError","generateEntityLink","generateLineageTable","generateTextElement","DuplicateEntityError","EntityNotFoundError","getParentTerm","connector","parentTermName","searchResult","Article","search","title","length","checkParentChildrenTermExists","parent","term","child","children","termName","setLineageTableField","customFieldId","article","table","result","updateCustomFieldsValue","field_id","oid","id","value","toString","otype","setAlternativeNameField","alternativeName","setReferenceField","reference","response","getTableByPath","path","segments","split","ds","Datasource","Table","name","toLowerCase","schema_name","ds_id","getTermByPath","parentName","parentTerm","findChild","find","getById","updateStewardsField","emailList","users","User","foundedUsers","filter","user","includes","email","join","errors","steward","display_name","url","push","checkSearchResult"],"mappings":"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","sourcesContent":["import {Alation, ITable} from 'alation_connector';\nimport {ITerm} from '../types';\nimport {ITermArticle, LinkCustomFieldValue} from '../types/alation';\nimport {TERM_COLUMN_NAMES} from '../constants';\nimport {\n  AlationTermError,\n  ParentTermDuplicateTermError,\n  ParentTermNotFoundTermError,\n  TermNotFoundTermError,\n} from '../errors/terms';\nimport {generateEntityLink, generateLineageTable, generateTextElement} from './html';\nimport {DuplicateEntityError, EntityNotFoundError} from '../errors/physics';\nimport {IAlationEntity} from 'alation_connector/src/interfaces/entity';\nimport {HTMLElement} from 'node-html-parser';\n\nexport async function getParentTerm(connector: Alation, parentTermName: string): Promise<ITermArticle> {\n  const searchResult = await connector.Article.search({title: parentTermName}, true) as ITermArticle[];\n  if (!searchResult.length) {\n    throw new ParentTermNotFoundTermError();\n  }\n  if (searchResult.length > 1) {\n    throw new ParentTermDuplicateTermError();\n  }\n  return searchResult[0];\n}\n\nexport function checkParentChildrenTermExists(parent: ITermArticle, term: ITerm): boolean {\n  for (const child of parent.children) {\n    if (child.title === term.termName) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport async function setLineageTableField(connector: Alation,\n    customFieldId: number,\n    article: ITermArticle,\n    table?: HTMLElement): Promise<boolean> {\n  const result = await connector.updateCustomFieldsValue({\n    field_id: customFieldId,\n    oid: article.id,\n    value: table ? table.toString() : generateLineageTable().toString(),\n    otype: 'article',\n  });\n\n  return !!result;\n}\n\nexport async function setAlternativeNameField(connector: Alation,\n    customFieldId: number,\n    article: ITermArticle,\n    alternativeName: string): Promise<boolean> {\n  const result = await connector.updateCustomFieldsValue({\n    field_id: customFieldId,\n    oid: article.id,\n    value: generateTextElement(alternativeName).toString(),\n    otype: 'article',\n  });\n\n  return !!result;\n}\n\nexport async function setReferenceField(connector: Alation,\n    customFieldId: number,\n    term: ITermArticle, reference: string): Promise<boolean> {\n  const response = await connector.updateCustomFieldsValue({\n    otype: 'article',\n    field_id: customFieldId,\n    oid: term.id,\n    value: reference ? generateEntityLink('table', await getTableByPath(connector, reference)).toString() : generateTextElement('').toString(),\n  });\n\n  return !!response;\n}\n\nexport async function getTableByPath(connector: Alation, path: string): Promise<ITable> {\n  const segments = path.split('.');\n  const ds = await connector.Datasource.search({title: segments[0]}, true);\n  if (ds.length !== 1) {\n    throw new AlationTermError(TERM_COLUMN_NAMES.reference, `не удалось найти источник с названием ${segments[0]}, либо найдено несколько`);\n  }\n  const table = await connector.Table.search({\n    name: segments[2].toLowerCase(),\n    schema_name: segments[1].toLowerCase(),\n    ds_id: ds[0].id,\n  }, true);\n  if (table.length === 1) {\n    return table[0];\n  }\n\n  throw new AlationTermError(TERM_COLUMN_NAMES.reference, `найдено несколько таблиц по ключу ${path}`);\n}\n\nexport async function getTermByPath(connector: Alation, parentName: string, termName: string): Promise<ITermArticle> {\n  const parentTerm = await getParentTerm(connector, parentName);\n  const findChild = parentTerm.children.find((child) => child.title === termName && child.otype === 'article');\n\n  if (findChild) {\n    const term = await connector.Article.getById<ITermArticle>(findChild.id);\n    if (term) {\n      return term;\n    }\n  }\n  throw new TermNotFoundTermError();\n}\n\nexport async function updateStewardsField(connector: Alation,\n    customFieldId: number,\n    term: ITermArticle,\n    emailList: string[]): Promise<void | string> {\n  const users = await connector.User.search({}, true);\n\n  const foundedUsers = users.filter((user) => emailList.includes(user.email));\n\n  if (foundedUsers.length !== emailList.length) {\n    return `не найдены пользователи с email: ${emailList.filter((email) => foundedUsers.find((user) => user.email === email)).join(',')}`;\n  }\n\n  const errors: string[] = [];\n  for (const steward of foundedUsers) {\n    const response = await connector.updateCustomFieldsValue<LinkCustomFieldValue>({\n      field_id: customFieldId,\n      otype: 'article',\n      oid: term.id,\n      value: {\n        display_name: '',\n        oid: steward.id,\n        otype: 'user',\n        url: steward.url,\n        id: steward.id,\n      },\n    });\n    if (!response) {\n      errors.push(steward.display_name);\n    }\n  }\n  if (errors.length) {\n    return `не удалось добавить steward: ${errors.join(',')}`;\n  }\n}\n\nexport function checkSearchResult<T extends IAlationEntity>(result: T[]): T {\n  if (!result.length) {\n    throw new EntityNotFoundError();\n  }\n  if (result.length > 1) {\n    throw new DuplicateEntityError();\n  }\n\n  return result[0];\n}\n"],"file":"index.js"}