{"version":3,"sources":["../../src/index.ts"],"names":["path","loadConfig","Alation","runTermService","runPhysicService","inquirer","run","process","env","console","log","inputConfigPath","inputFilePath","inputMode","inputSkipHeader","prompt","type","name","message","default","join","cwd","choices","filter","input","configPath","isAbsolute","filePath","config","connector","username","password","host","tokenName","tokenStoragePath","e","error"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {loadConfig} from './helpers/config';\nimport {Alation} from 'alation_connector';\nimport {runTermService} from './services/term';\nimport {runPhysicService} from './services/physics';\nimport {ModeType, TerminalAnswer} from './types';\nimport inquirer from 'inquirer';\n\nexport async function run(): Promise<void> {\n  try {\n    process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';\n    console.log('Загрузчик терминов и физики в Alation');\n    const {\n      inputConfigPath,\n      inputFilePath,\n      inputMode,\n      inputSkipHeader,\n    } = await inquirer.prompt<TerminalAnswer>([\n      {\n        type: 'input',\n        name: 'inputConfigPath',\n        message: 'Укажите путь к конфигурационному файлу',\n        default: path.join(process.cwd(), 'config.json'),\n      },\n      {\n        type: 'list',\n        name: 'inputMode',\n        message: 'Выберите режим работы',\n        choices: [\n          'Загрузка терминов',\n          'Загрузка физики',\n        ],\n        default: 'Загрузка терминов',\n        filter(input: string): ModeType {\n          if (input === 'Загрузка терминов') {\n            return 'terms';\n          }\n          return 'physics';\n        },\n      },\n      {\n        type: 'input',\n        name: 'inputFilePath',\n        message: 'Укажите путь к TSV файлу',\n        default: path.join(process.cwd(), 'file.tsv'),\n      },\n      {\n        type: 'list',\n        name: 'inputSkipHeader',\n        message: 'Первая запись в файле заголовок?',\n        choices: [\n          'Да',\n          'Нет',\n        ],\n        default: 'Да',\n        filter(input: string): boolean {\n          return input === 'Да';\n        },\n      },\n    ]);\n\n    const configPath: string = path.isAbsolute(inputConfigPath) ? inputConfigPath : path.join(process.cwd(), inputConfigPath);\n    const filePath: string = path.isAbsolute(inputFilePath) ? inputFilePath : path.join(process.cwd(), inputFilePath);\n    const config = loadConfig(configPath);\n\n\n    const connector = new Alation({\n      username: config.username,\n      password: config.password,\n    }, config.host, {tokenName: config.tokenName, tokenStoragePath: config.tokenStoragePath});\n\n\n    if (inputMode === 'terms') {\n      await runTermService(connector, config, filePath, inputSkipHeader);\n    } else {\n      await runPhysicService(connector, config, filePath, inputSkipHeader);\n    }\n  } catch (e) {\n    console.error(e.message);\n  }\n  console.log('Завершение работы');\n}\n"],"file":"index.js"}